#!/usr/bin/env ruby

# Git pre-commit hook that tells user to install some *real* git hooks.
#
# I have a great (IMO) git pre-commit hook, but I never remember to install it 
# into new projects.  I can't use the 
# 
# git config --global init.templatedir '~/.git_template'
#
# trick to install the GOOD pre-commit hooks, since I install symlinks
# to ensure that even old projects are always using the most up-to-date 
# hooks that I have installed on my machine.
# So, I set up this default hook to install the GOOD hooks automatically.  

# Check to see if we have a record of a git repo already installed and still present.
SYMLINK_SOURCE_REPO = `git config hooks.symlinksourcerepo`.strip
repo_exists = (!SYMLINK_SOURCE_REPO.strip.empty?) && (File.directory?(SYMLINK_SOURCE_REPO) || File.symlink?(SYMLINK_SOURCE_REPO))

if repo_exists
  # The user has installed the hooks into at least one other project,
  # AND the hooks still exist,
  # AND we know that the user hasn't installed any "better" hooks in this
  # repo (otherwise this code wouldn't be running, would it?)
  # So, what the hey, let's go ahead and install our great hooks here!
  `#{SYMLINK_SOURCE_REPO}/setup.sh #{File.dirname(File.dirname(File.dirname(File.expand_path(__FILE__))))}`

  # That installed the symbolic link, so things will stay refreshed forever.
  # BUT, to trigger the new hooks, we need to error out so that the user will
  # run git commit AGAIN.
  message = <<END

An great set of git pre-commit hooks has been installed to this repo!

Unfortunately, to make them work, this commit had to be aborted.
Please commit again - they'll work fine from now on.

(More information is available at...
https://github.com/bobgilmore/githooks )

@bob_gilmore

END

  else

message = <<END

This git repository doesn't have good git pre-commit hooks installed,
just a "placeholder" set that exists solely to give you this message!

Since you haven't supplied any hooks, you should install *great* ones!
To do so, run...

cd <some directory where you can clone a Git repo.  I use ~/code >
git clone git@github.com:bobgilmore/githooks.git #clone the repo
cd githooks
./setup.sh #{File.dirname(File.dirname(File.dirname(File.expand_path(__FILE__))))}
cd #{File.dirname(File.dirname(File.dirname(File.expand_path(__FILE__))))} #cd back here

(More information is available at...
https://github.com/bobgilmore/githooks#installation )

If instead you want this placeholder set to go away forever so you can commit 
normally, run...

rm #{File.expand_path(__FILE__)}

@bob_gilmore

END
end

puts message
exit 1
